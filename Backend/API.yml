openapi: 3.0.1
info:
  title: Crew Member API
  description: API to manage crew members in the system
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Base URL for CrewMember API

paths:
  #  Use Case 1:  Crew Member Creates Crew Member Profile
  /crewMember:
    post:
      summary: Create a new crew member
      description: Adds a new crew member to the system
      operationId: createCrewMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrewMemberCreationRequestDTO'
      responses:
        '200':
          description: Successfully created crew member
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Add Success
                  data:
                    $ref: '#/components/schemas/CrewMemberCreationResponseDTO'
        '400':
          description: Bad request (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: "First name is required"
                      lastName:
                        type: string
                        example: "Last name is required"
                      email:
                        type: string
                        example: "Email is required"
                      phoneNumber:
                        type: string
                        example: "Phone number is required"
                      role:
                        type: string
                        example: "Role is required"
                      positions:
                        type: string
                        example: "Positions is required"
        '409':
          description: Conflict - Duplicate email detected
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 409
                  message:
                    type: string
                    example: "Email is already in use."
                  data:
                    type: object
                    nullable: true

    #    Use case 16 : Admin views crew members
    get:
      summary: Get all crew members
      description: Retrieves a list of all crew members
      operationId: getAllCrewMembers
      responses:
        '200':
          description: Successfully retrieved all crew members
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find Success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SimpleCrewMemberResponse'
        '204':
          description: No content found (No crew members)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 204
                  message:
                    type: string
                    example: "No members found"
                  data:
                    type: object
                    nullable: true


  #  Use case 3: Crew Member Views A Crew Memberâ€™s Profile
  /crewMember/{userId}:
    get:
      summary: Get a crew member by userId
      description: Fetches a specific crew member by their unique userId
      operationId: getCrewMemberById
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the crew member to be retrieved
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the crew member
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Found member with id: 2"
                  data:
                    $ref: '#/components/schemas/CrewMemberCreationResponseDTO'
        '404':
          description: User not found by the provided ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Could not find crew member with id 1"
                  data:
                    type: object
                    nullable: true

    #  Use case 15: Admin Deletes Crew Member
    delete:
      summary: Delete a crew member by userId
      description: Deletes a specific crew member by their unique userId
      operationId: deleteCrewMember
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the crew member to be deleted
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the crew member
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Delete Success of crew member with id: 2"
        '404':
          description: User not found by the provided ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Could not find crew member with id 1"
                  data:
                    type: object
                    nullable: true

  #Use case 18: Admin Creates Game Schedule
  /gameSchedule:
    post:
      summary: Create a new game schedule
      description: Adds a new game schedule to the system
      operationId: createGameSchedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameScheduleDto'
      responses:
        '200':
          description: Successfully created game schedule
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Add Success"
                  data:
                    $ref: '#/components/schemas/GameSchedule'
        '400':
          description: Bad request (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                  data:
                    type: object
                    properties:
                      sport:
                        type: string
                        example: "Sport is required"
                      season:
                        type: string
                        example: "Season is required"

  #Use case 20: Admin adds game to game schedule
  /gameSchedule/{scheduleId}/games:
    post:
      summary: Add a game to an existing game schedule
      description: Adds a new game to the specified game schedule
      operationId: addGameToSchedule
      parameters:
        - name: scheduleId
          in: path
          required: true
          description: ID of the game schedule to add the game to
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRequestDto'
      responses:
        '200':
          description: Successfully added the game to the schedule
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: truex
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Add Success"
                  data:
                    $ref: '#/components/schemas/GameResponseDto'
        '400':
          description: Bad request (validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                  data:
                    type: object
                    properties:
                      gameDate:
                        type: string
                        example: "Game date is required"
                      venue:
                        type: string
                        example: "Venue is required"
                      opponent:
                        type: string
                        example: "Opponent is required"
                      isFinalized:
                        type: string
                        example: "Finalized status is required"
  #  Use case 5:  Crew Member Views General Game Schedule
  /games:
    get:
      summary: Get all games
      description: Retrieve a list of all games with their schedule, venue, opponent, and status.
      tags:
        - Games
      responses:
        '200':
          description: Successfully retrieved list of games
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Find Success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        gameId:
                          type: integer
                          example: 1
                        scheduleId:
                          type: integer
                          example: 10
                        gameDate:
                          type: string
                          format: date-time
                          example: "2025-04-28T18:30:00Z"
                        venue:
                          type: string
                          example: "Stadium A"
                        opponent:
                          type: string
                          example: "Frogs United"
                        finalized:
                          type: boolean
                          example: false
        '204':
          description: No games found
  #  use case 7
  /availability:
    post:
      summary: Submit crew member availability for a game
      description: Allows a crew member to submit whether they are available for a specific game.
      operationId: addAvailability
      tags:
        - Availability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityDto'
      responses:
        '201': # Use 201 Created for successful resource creation
          description: Successfully submitted availability
          content:
            application/json:
              schema:
                # Option 1: If using ResponseEntity<AvailabilityDto>
                $ref: '#/components/schemas/AvailabilityDto'
                # Option 2: If using your Result object wrapper
                # type: object
                # properties:
                #   flag:
                #     type: boolean
                #     example: true
                #   code:
                #     type: integer
                #     example: 201
                #   message:
                #     type: string
                #     example: "Add Success"
                #   data:
                #     $ref: '#/components/schemas/AvailabilityDto'
        '400':
          description: Bad request (validation errors on input DTO)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "userId is required."
                      gameId:
                        type: string
                        example: "gameId is required."
                      available:
                        type: string
                        example: "Available is required."
        '404':
          description: Not Found (Referenced CrewMember or Game does not exist)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    # Example for user not found, adjust for game not found
                    example: "Could not find CrewMember with id 99"
                  data:
                    type: object
                    nullable: true
        '409':
          description: Conflict (Availability for this user and game already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 409
                  message:
                    type: string
                    example: "Availability already exists for user 12 and game 5" # Example message
                  data:
                    type: object
                    nullable: true
  #  use case 6
  /crewList/{gameId}:
    get:
      summary: Get crew list for a specific game
      description: Retrieves the game details and the list of assigned crew members for a given game ID.
      operationId: getCrewListForGame
      tags:
        - Crew Assignment
      parameters:
        - name: gameId
          in: path
          required: true
          description: ID of the game for which to retrieve the crew list
          schema:
            type: integer
            format: int64  # Use int64 for Long
      responses:
        '200':
          description: Successfully retrieved the crew list
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Find Success
                  data:
                    $ref: '#/components/schemas/CrewListDto' # Reference the new DTO schema
        '404':
          description: Game not found by the provided ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Could not find Game with Id 1" # Example error message
                  data:
                    type: object
                    nullable: true

    # Use Case 23: Admin adds new crew Schedule for a Specific Game
  /crewSchedule/{gameId}:
    post:
      summary: Add or update crew assignments for a specific game
      description: Saves a list of crew assignments (positions, report times, locations) for the specified game.
      operationId: addCrewSchedule
      tags:
        - Crew Assignment # Add a relevant tag
      parameters:
        - name: gameId
          in: path
          required: true
          description: ID of the game for which to add/update the crew schedule
          schema:
            type: integer # Changed from string to integer based on Long type
            format: int64  # Use int64 for Long
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrewAssignmentDto' # Reference the new DTO schema
      responses:
        '200': # Assuming 200 OK for successful addition/update
          description: Successfully added/updated the crew assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Add Success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CrewAssignmentDto' # Returns the saved assignments
        '400':
          description: Bad request (validation errors on the list of assignments)
          content:
            application/json:
              schema:
                # Assuming a standard Spring Boot validation error response structure
                # or your custom error structure if you have one.
                # This example shows a potential structure matching your other 400s.
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Provided arguments are invalid, see data for details."
                  data:
                    type: object
                    # Example validation errors - specific fields depend on what failed
                    properties:
                      # Errors might be keyed by list index and field name
                      '[0].position':
                        type: string
                        example: "Position is required"
                      '[1].reportTime':
                        type: string
                        example: "Report time is required"

        '404':
          description: Game not found by the provided ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Could not find Game with Id 99" # Example error message
                  data:
                    type: object
                    nullable: true


  /auth/login:
    post:
      summary: Authenticate user and get login information
      description: |
        Authenticates a user with their credentials and returns login information including
        user ID, role, and JWT token for subsequent authenticated requests.
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Validate invite token
      description: Validates if a provided invite token is valid
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: The invite token to validate
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidTokenResponse'
                  - $ref: '#/components/schemas/InvalidTokenResponse'


components:
  schemas:
    CrewMember:
      type: object
      properties:
        userId:
          type: integer
          example: 2
        fullName:
          type: string
          example: Jane Smith
        email:
          type: string
          example: Jane.Smith@example.com
        phoneNumber:
          type: string
          example: 1112223333

    CrewMemberCreationRequestDTO:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the crew member
          example: Jane
        lastName:
          type: string
          description: Last name of the crew member
          example: Smith
        email:
          type: string
          description: Email of the crew member
          example: Jane.Smith@example.com
        phoneNumber:
          type: string
          description: Phone number of the crew member (10 digits or 999-999-9999 format)
          example: 1112223333
        password:
          type: string
          description: Password of crew member
          example: strong password
        role:
          type: string
          description: Role of the crew member
          example: Assistant Coach
        positions:
          type: array
          description: Positions held by the crew member
          example: [ "Midfielder", "Coach" ]

    CrewMemberCreationResponseDTO:
      type: object
      properties:
        userId:
          type: integer
          example: 2
        fullName:
          type: string
          example: Jane Smith
        email:
          type: string
          example: Jane.Smith@example.com
        phoneNumber:
          type: string
          example: 1112223333
        role:
          type: string
          example: Assistant Coach
        positions:
          type: string
          example: Midfielder, Coach
    GameSchedule:
      type: object
      properties:
        scheduleId:
          type: integer
          example: 1
        sport:
          type: string
          example: Football
        season:
          type: string
          pattern: "^[0-9]{4}-[0-9]{4}$"
          example: 2024-2025
        games:
          type: array
          items:
            $ref: '#/components/schemas/GameRequestDto'

    GameScheduleDto:
      type: object
      properties:
        sport:
          type: string
          example: Football
        season:
          type: string
          example: 2024-2025

    GameRequestDto:
      type: object
      properties:
        gameDate:
          type: string
          format: date
          example: "2025-11-30"
        venue:
          type: string
          example: "Stadium A"
        opponent:
          type: string
          example: "Team B"
        isFinalized:
          type: boolean
          example: true

    GameResponseDto:
      type: object
      properties:
        gameId:
          type: integer
          example: 123
        gameDate:
          type: string
          format: date
          example: "2025-11-30"
        venue:
          type: string
          example: "Stadium A"
        opponent:
          type: string
          example: "Team B"
        isFinalized:
          type: boolean
          example: true

    SimpleCrewMemberResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 2
        fullName:
          type: string
          example: "Jane Smith"
        role:
          type: string
          example: "Assistant Coach"
    AvailabilityDto:
      type: object
      required:
        - userId
        - gameId
        - available
      properties:
        userId:
          type: integer # Or Long
          description: The ID of the crew member submitting availability.
          example: 15
        gameId:
          type: integer # Or Long
          description: The ID of the game for which availability is being submitted.
          example: 101
        available:
          type: boolean
          description: True if the crew member is available, false otherwise.
          example: true
        comment:
          type: string
          description: Optional comment regarding availability.
          example: "Might be 15 minutes late"
          nullable: true
    CrewAssignmentDto:
      type: object
      description: Represents a single crew assignment for a game.
      properties:
        crewedUserId:
          type: integer
          format: int64
          description: The unique ID of this specific assignment entry (null if creating).
          nullable: true
          example: 1
        userId:
          type: integer
          format: int64
          description: The ID of the assigned CrewMember.
          example: 101
        gameId:
          type: integer
          format: int64
          description: The ID of the game this assignment belongs to.
          example: 1
        position:
          type: string
          description: The position assigned to the crew member for this game.
          example: "Camera 1"
        fullName:
          type: string
          description: The full name of the assigned crew member (read-only, derived data).
          example: "Jane Doe"
          readOnly: true
        reportTime:
          type: string
          format: time # OpenAPI format for LocalTime
          description: The required report time for the crew member (e.g., HH:mm:ss).
          example: "15:00:00"
        reportLocation:
          type: string
          description: The location where the crew member should report.
          example: "Gate A"
      required: # Based on @NotNull/@NotBlank annotations
        - userId
        - gameId
        - position
        - reportTime
        - reportLocation

    CrewListDto:
      type: object
      description: Represents the details of a game and its assigned crew.
      properties:
        gameId:
          type: integer
          format: int64
          description: The unique ID of the game.
          example: 1
        gameStart:
          type: string
          description: The start time or general date/time indicator for the game (currently mapped from game date).
          example: "2025-09-15"
        gameDate:
          type: string
          description: The date of the game (currently mapped from game date).
          example: "2025-09-15"
        venue:
          type: string
          description: The venue where the game takes place.
          example: "Home Stadium"
        opponent:
          type: string
          description: The opponent team for the game.
          example: "Rival U"
        crewedMembers:
          type: array
          description: A list of crew members assigned to this game.
          items:
            $ref: '#/components/schemas/CrewAssignmentDto'
    LoginResponse:
        type: object
        properties:
          flag:
            type: boolean
            example: true
          code:
            type: integer
            example: 200
          message:
            type: string
            example: "Login success"
          data:
            type: object
            properties:
              userId:
                type: string
                example: "123"
              role:
                type: string
                example: "ROLE_user"
              token:
                type: string
                example: "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwiaWF0IjoxNjE0MjE1NjQ0LCJleHAiOjE2MTQyMjI4NDQsInN1YiI6InVzZXIxIiwiYXV0aG9yaXRpZXMiOiJST0xFX3VzZXIifQ..."
    ValidTokenResponse:
          type: object
          properties:
            flag:
              type: boolean
              example: true
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "Token valid"
            data:
              type: object
              properties:
                token:
                  type: string
                  example: "valid-token"
    InvalidTokenResponse:
          type: object
          properties:
                flag:
                  type: boolean
                  example: false
                code:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: "Token not valid"
                data:
                  type: null


    ErrorResponse:
          type: object
          properties:
            flag:
              type: boolean
              example: false
            code:
              type: integer
              example: 401
            message:
              type: string
              example: "Authentication failed"
            data:
              type: null
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT





  responses:
    InvalidRequest:
      description: The request is invalid due to incorrect parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid request"

